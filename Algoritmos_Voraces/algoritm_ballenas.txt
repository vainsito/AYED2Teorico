/*

    n ballenas, tiempos s1, s2, s3, ... sn que cada ballena es capaz de sobrevivir hasta que llegue el equipo de rescate.
    Dar un algoritmo que determine el orden en que se debe rescatar a las ballenas para que el número de ballenas que mueran sea mínimo.
    Asumiendo que llevar una ballena al mar toma tiempo constante t , que hay un unico equipo de rescate y que la ballena no muere mientras
    esta siendo regresada al mar.
    //// CRITERIO DE SELECCION /////
    Seleccionar la ballena que muera mas rapido (menor tiempo de supervivencia): seleccionar  min(sj - t) con j: 1<=j<=n
    //// CRITERIO DE FACTIBILIDAD /////
    La ballena seleccionada debe ser rescatada antes de que muera. y se tiene en cuenta que al salvar una ballena el tiempo cambia y se resta a la cantidad de tiempo de vida de cada ballena
    //// CRITERIO DE OPTIMALIDAD /////
    Seleccionar la ballena que muera mas rapido (menor tiempo de supervivencia): seleccionar  min(sj - t) con j: 1<=j<=n
    si sj - t <= 0 entonces la ballena muere antes de que llegue el equipo de rescate, por lo tanto no se puede rescatar.
    si sj - t > 0 entonces la ballena muere despues de que llegue el equipo de rescate, por lo tanto se puede rescatar.
    //// ESTRUCTURA DE DATOS /////

    type ballenas = Array of ballena
    type ballena =  tuple
                        tiempoSobrevivencia :nat
                        idBallena : String
                    end tuple
    type res = List of idBallena    

*/
type ballenas = Array of ballena
type ballena =  tuple
                    tiempoSobrevivencia :nat
                    idBallena : String
                end tuple
type res = Array of String

fun orden_de_salvacion(b: ballenas, t) ret array_ord : res 
    arraux : ballenas
    contador : nat
    contador := 0 

    for i = 1 to length(b) do   // Se agrega la condición de que la ballena debe sobrevivir al tiempo t
        if b[i].tiempoSobrevivencia > t then  // Se cambia la condición de > 0 a > t
            arraux[contador] := b[i]       // Se agrega la ballena al arreglo auxiliar
            contador := contador + 1    
        fi
    od

    for i = 1 to length(arraux) do   // Se agrega la condición de que la ballena debe sobrevivir al tiempo t
        min := arraux[1].tiempoSobrevivencia    
        for j = 1 to length(arraux) do     
            if arraux[j].tiempoSobrevivencia < min then   
                min := arraux[j].tiempoSobrevivencia     
            fi
        od
        array_ord[i] := min
        arraux := eliminarBallena(arraux, min) // Se agrega la eliminación de la ballena del arreglo auxiliar
    od

    ret array_ord
end fun

/* 
    Función auxiliar para eliminar la ballena del arreglo auxiliar
*/

fun eliminarBallena(b: ballenas, tiempo: nat) ret ballenas  
    arr : ballenas
    contador : nat
    contador := 0

    for i = 1 to length(b) do   
        if b[i].tiempoSobrevivencia <> tiempo then  /* Se agrega la condición de que la ballena debe sobrevivir al tiempo t */
            arr[contador] := b[i]
            contador := contador + 1
        fi
    od

    ret arr
end fun

